---
- name: Server Install 
  hosts: all
  remote_user: root

  vars_files:
    - ./vars/vault.yml
    - ./vars/vars.yml

  vars_prompt:
    - name: symfony_env
      prompt: "Enter the environment for your Symfony app (prod|dev|test)"
      default: prod
      private: no

  environment:
    SYMFONY_ENV: "{{ symfony_env|lower }}"

  tasks: 
    - ping: ~

    - name: apt-get update
      become: true
      apt:
        update_cache: yes

    - name: Create project directory and set its permissions
      become: true
      file:
        path: "{{ symfony_root_dir }}"
        state: directory
        recurse: yes

    - name: Git clone
      git:
        repo: https://github.com/Yohann76/SnowTricks
        dest: "{{ symfony_root_dir }}"
        force: yes
        clone: yes

    - name: Install Git VCS
      become: true
      apt:
        name: git
        state: latest

    - name: Fix var directory permissions
      file:
        path: "{{ symfony_var_dir }}"
        state: directory
        mode: 0777
        recurse: yes

    - name: Fix var bin/console permissions
      file:
        path: "{{ symfony_console_path }}"
        mode: 0777

    - name: apt-get install composer
      become: true
      apt:
        name: composer
        state: latest
##
    - name: Fix var directory permissionss
      file:
        path: "{{ symfony_var_dir }}"
        state: directory
        mode: 0777
        recurse: yes

    - name: Download composer
      get_url:
        url: https://getcomposer.org/installer
        dest: "{{ installer }}"

    - name: Install composer
      command: "{{ item }}"
      with_items:
        - "php {{ installer }}"
        - mv composer.phar /usr/local/bin/composer
      notify: Restart Nginx
##
    - name: Set permissions on Composer
      become: true
      file:
        path: /usr/bin/composer
        mode: "a+x"

    - name: Install Composer's dependencies
      become: true
      composer:
        working_dir: "{{ symfony_root_dir }}"
        no_dev: no

    #- name : Delete .env ( export github )
      #become: true
      #command: rm -rf /var/www/html/Snowtricks/.env

    #- name: Add .env ( import ansible/templates )
      #become: true
      #template:
        #src: templates/.env
        #dest: "/var/www/html/Snowtricks"

    - name: Add SQL Templating for connexion
      become: true
      lineinfile:
        dest: "{{ symfony_root_dir }}/.env"
        regexp: "DATABASE_URL ="
        line: "DATABASE_URL = DATABASE_URL=mysql://user1:{{ sql_pass}}@127.0.0.1:3306/snowtricks"

##

    # Symfony console commands
    - name: Create DB if not exists
      command: '{{ symfony_console_path }} doctrine:database:create --if-not-exists --no-interaction'
      register: db_create_result
      changed_when: "not db_create_result.stdout|search('already exists. Skipped')"

    - name: Execute migrations
      command: '{{ symfony_console_path }} doctrine:migrations:migrate --no-interaction'
      when: code_changed

    - name: Load data fixtures
      command: '{{ symfony_console_path }} doctrine:fixtures:load --no-interaction'
      when: symfony_env != "prod"

    - name: Clear cache
      command: '{{ symfony_console_path }} cache:clear --env={{ symfony_env }}'
      changed_when: false
      when: code_changed

  roles:
    - php
    - nginx
    - mysql

  handlers:
    - name: Restart Nginx
      become: true
      service:
        name: nginx
        state: restarted

    - name: Restart PHP-FPM
      become: true
      service:
        name: php7.3-fpm
        state: restarted

...